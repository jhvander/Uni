import fixed_income_derivatives_E2024 as fid
import matplotlib.pyplot as plt
import numpy as np
import copy

EURIBOR_fixing = [{"id": 0,"instrument": "libor","maturity": 1/2, "rate":0.00967}]
fra_market = [{"id": 1,"instrument": "fra","exercise": 1/12,"maturity": 7/12,
"rate": 0.00980},
{"id": 2,"instrument": "fra","exercise": 2/12,"maturity": 8/12, "rate": 0.01043},
{"id": 3,"instrument": "fra","exercise": 3/12,"maturity": 9/12, "rate": 0.01130},
{"id": 4,"instrument": "fra","exercise": 4/12,"maturity": 10/12, "rate": 0.01217},
{"id": 5,"instrument": "fra","exercise": 5/12,"maturity": 11/12, "rate": 0.01317},
{"id": 6,"instrument": "fra","exercise": 6/12,"maturity": 12/12, "rate": 0.01399},
{"id": 7,"instrument": "fra","exercise": 7/12,"maturity": 13/12, "rate": 0.01478},
{"id": 8,"instrument": "fra","exercise": 8/12,"maturity": 14/12, "rate": 0.01560},
{"id": 9,"instrument": "fra","exercise": 9/12,"maturity": 15/12, "rate": 0.01637}]
swap_market = [{"id": 10,"instrument": "swap","maturity": 2, "rate": 0.01652,
"float_freq": "semiannual", "fixed_freq": "annual","indices": []},
{"id": 11,"instrument": "swap","maturity": 3, "rate": 0.02019, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 12,"instrument": "swap","maturity": 4, "rate": 0.02319, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 13,"instrument": "swap","maturity": 5, "rate": 0.02577, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 14,"instrument": "swap","maturity": 7, "rate": 0.02995, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 15,"instrument": "swap","maturity": 10, "rate": 0.03395, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 16,"instrument": "swap","maturity": 15, "rate": 0.03753, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 17,"instrument": "swap","maturity": 20, "rate": 0.03873, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []},
{"id": 18,"instrument": "swap","maturity": 30, "rate": 0.03975, "float_freq":
"semiannual", "fixed_freq": "annual","indices": []}]
data = EURIBOR_fixing + fra_market + swap_market

interpolation_options = {"method":"hermite","degree":2,"transition" :"smooth"}
T_fit, R_fit = fid.zcb_curve_fit(data,interpolation_options =
interpolation_options)
p_inter, R_inter, f_inter, T_inter = fid.zcb_interpolate(T_fit,R_fit, interpolation_options = interpolation_options, resolution = 10)

# c) Plotting the par swap rate 
T_swap = np.array([i for i in range(1,31)])
R_swap, S_swap = np.zeros([len(T_swap)]), np.zeros([len(T_swap)])
for i, maturity in enumerate(T_swap):
    R_swap[i], S_swap[i] = fid.swap_rate_zcb_prices(0,0,T_swap[i], "annual",T_inter, p_inter)
print(f"10Y par swap rate: {R_swap[9]}), accrual factor: {S_swap[9]}")

swap_id, size_bump = 15, 0.0001


# b) DV01 for bumping one point on the spot curve 
idx_bump = 119 
R_bump = R_inter.copy()
R_bump[idx_bump] += size_bump
p_bump =fid.zcb_prices_from_spot_rates(T_inter, R_bump)
R_swap_bump, S_swap_bump = fid.swap_rate_from_zcb_prices(0,0,data[swap_id]["maturity"],"annual", T_inter,p_bump)
print(f"R_swap_bump: {R_swap_bump}, S_swap_bum {S_swap_bump}")
DV01 = (R_swap_bump-data[swap_id]["rate"])*S_swap_bump
print(f"DV01 for swap {swap_id} whe bumping spot_rate for T: {T_inter[idx_bump]} is: {10000*DV01}")


def DV01_swap_spot_rate_bump_fct(t, T_n, T_N, fixed_freq,R_swap_init,T_bump,size_bump,T_inter,R_inter,p_inter):
    R_bump, p_bump = fid.spot_rate_bump(T_bump,size_bump,T_inter,R_inter,p_inter)
    R_swap_bump, S_swap_bump = fid.swap_rate_from_zcb_prices(t,T_n,T_N,fixed_freq,T_inter,p_bump)
    DV01 = (R_swap_bump-R_swap_init)*S_swap_bump
    return DV01

# b) DV01 for bumping each of the spot rates at T = [1,2,3,4,5,6,7,8,9,10]
DV01_bump = np.zeros([10])
for i, T_val in enumerate(T_bump):
    DV01_bump[i] = DV01_swap_spot_rate_bump_fct(0,0,data[swap_id]["maturity"],"annual", data[swap_id]["rate"],T_val,size_bump,T_inter,R_inter,p_inter)
print(f"DV01 when bumping each spot rate seperately: {10000*DV01_bump}")
    




